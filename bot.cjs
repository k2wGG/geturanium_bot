// bot.cjs
const fs = require('fs').promises;
const path = require('path');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');

puppeteer.use(StealthPlugin());

/* ===== 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é =================== */
const DEF = {
  enabled: true,
  // –¢–æ–≥–≥–ª—ã –¥–µ–π—Å—Ç–≤–∏–π
  autoAC: true,         // Auto Collector
  autoSM: true,         // Shard Multiplier
  autoCB: true,         // Conveyor Booster
  autoFarm: true,       // (—Ä–µ–∑–µ—Ä–≤)
  autoRefine: true,     // Initiate Uranium Refining (—Ä–∞–∑ –≤ 8—á)
  // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
  keepAlive: true,
  autoReload: true, reloadMinutes: 50,
  logEach: 300,         // —á–∞—Å—Ç–æ—Ç–∞ info/debug —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
  // –ë—Ä–∞—É–∑–µ—Ä
  headless: false, slowMo: 0,
  useSystemChrome: true, chromePath: '',
  acceptLanguage: 'en-US,en;q=0.9',
  timezone: 'Europe/Berlin',
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –±—É—Å—Ç–æ–≤ (–≥–ª–∞–≤–Ω–∞—è)
  boostIntervalMs: 300000,     // 5 –º–∏–Ω—É—Ç
  boostJitterMs: 15000,        // ¬±15—Å
  // –ü—É—Ç–∏
  cookiesFilePath: './cookies.json',
  configFilePath: './config.json',
  statsFilePath: './stats.json',
  backoffUntil: 0,
  // –ü—Ä–æ–∫—Å–∏
  proxies: [],                 // —Å—Ç—Ä–æ–∫–∏ "login:pass@host:port" –∏–ª–∏ "http://login:pass@host:port"
  proxyRotation: 'perLaunch',  // 'perLaunch' | 'sequential'
  rotateProxyOnReload: true
};

/* ===== 2. –°–æ—Å—Ç–æ—è–Ω–∏–µ ================================= */
let config = { ...DEF };
let stats  = {
  reloadCount: 0,
  clickCount: { autoAC:0, autoSM:0, autoCB:0, autoFarm:0, autoRefine:0 },
  lastClick:  { autoAC:0, autoSM:0, autoCB:0, autoFarm:0, autoRefine:0 } // –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û!
};

let browser, page;
let navigating = false;
let lastCookieSave = Date.now();

// –õ–æ–∫–∞–ª—å–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ lastClick (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∏—à–µ—Ç —Å—é–¥–∞; –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –ø–∏—à–µ–º –≤ stats.lastClick)
let lastClick = { autoAC:0, autoSM:0, autoCB:0, autoFarm:0, autoRefine:0 };
let clientBackoffUntil = 0;

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è /refinery: –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ —Ç—É–¥–∞ –∏–¥—Ç–∏
let nextRefineryVisitAt = 0;   // timestamp (ms)

/* ===== Proxy helpers ================================ */
let __proxyIndex = 0;
function pickProxy() {
  const list = Array.isArray(config.proxies) ? config.proxies : [];
  if (!list.length) return null;
  if (config.proxyRotation === 'sequential') {
    const p = list[__proxyIndex % list.length]; __proxyIndex++; return p;
  }
  return list[Math.floor(Math.random() * list.length)];
}

/** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ —Å—Ç—Ä–æ–∫–∏.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: "login:pass@host:port" –∏–ª–∏ "http://login:pass@host:port"
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { serverArg: "http://host:port", auth: {username, password} } –ª–∏–±–æ null
 */
function normalizeProxy(p) {
  try {
    if (!p) return null;
    let s = String(p).trim();
    if (!/^[a-z]+:\/\//i.test(s)) s = 'http://' + s; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é http://
    const u = new URL(s);
    const scheme = u.protocol.replace(':','').toLowerCase(); // http/https/socks5
    const host = u.hostname;
    const port = u.port;
    if (!host || !port) return null;
    const auth = (u.username || u.password) ? {
      username: decodeURIComponent(u.username),
      password: decodeURIComponent(u.password)
    } : null;
    return { serverArg: `${scheme}://${host}:${port}`, auth };
  } catch {
    return null;
  }
}

/* ===== 3. –õ–æ–≥–≥–µ—Ä =================================== */
const COLOR = { info:34, warn:33, error:31, debug:36, success:32 };
const LOG_LEVELS = ['debug', 'info', 'warn', 'error'];
const MIN_LOG_LEVEL_INDEX = 1;

function log(msg, level='info') {
  const levelIndex = LOG_LEVELS.indexOf(level);
  if (levelIndex < MIN_LOG_LEVEL_INDEX) return;
  const time = new Date().toLocaleTimeString('ru-RU');
  const prefix = { info:'‚ÑπÔ∏è', warn:'‚ö†Ô∏è', error:'üö®', debug:'üêû', success:'‚úÖ' }[level] || ' ';
  console.log(`\x1b[${COLOR[level]||37}m[${time}] ${prefix} ${msg}\x1b[0m`);
}

/* ===== 4. –£—Ç–∏–ª–∏—Ç—ã ================================== */
const rnd   = (min, max) => (min + Math.random() * (max - min)) | 0;
const sleep = ms => new Promise(r => setTimeout(r, ms));

/* ===== 5. –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ======================= */
async function ensureDir(file) {
  await fs.mkdir(path.dirname(path.resolve(file)), { recursive:true });
}
async function load(file, def) {
  try { return JSON.parse(await fs.readFile(path.resolve(file), 'utf8')); }
  catch (e) {
    if (e.code === 'ENOENT') {
      log(`‚ÑπÔ∏è –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`, 'info');
      return def;
    }
    log(`‚ùå Error loading ${file}: ${e.message}`, 'error');
    return def;
  }
}
async function save(file, data) {
  await ensureDir(file);
  await fs.writeFile(path.resolve(file), JSON.stringify(data, null, 2), 'utf8');
}

/* ===== 6. –ó–∞–ø—É—Å–∫ Puppeteer ======================== */
const PROFILE_DIR = path.resolve(__dirname, 'browser_profile');
async function launch() {
  if (browser) {
    log('‚ÑπÔ∏è –ó–∞–∫—Ä—ã–≤–∞—é —Å—Ç–∞—Ä—ã–π –±—Ä–∞—É–∑–µ—Ä...', 'info');
    try { await browser.close(); } catch (e) { log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${e.message}`, 'error'); }
  }

  log('‚ÑπÔ∏è –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...', 'info');
  try {
    // headless —Ä–µ–∂–∏–º
    let finalHeadlessMode;
    if (process.env.HEADLESS === 'true') finalHeadlessMode = 'new';
    else if (process.env.HEADLESS === 'false') finalHeadlessMode = false;
    else finalHeadlessMode = config.headless === true ? 'new' : config.headless;
    log(`üêû Debug: –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ headless –¥–ª—è Puppeteer: "${finalHeadlessMode}"`, 'debug');

    const launchArgs = [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--window-size=1920,1080',
      '--disable-blink-features=AutomationControlled',
      '--disable-notifications',
      '--disable-popup-blocking',
      '--ignore-certificate-errors'
    ];

    // –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏
    const rawProxy    = pickProxy();
    const parsedProxy = normalizeProxy(rawProxy);
    if (parsedProxy) {
      launchArgs.push(`--proxy-server=${parsedProxy.serverArg}`);
      log(`üåê Proxy: ${parsedProxy.serverArg} ${parsedProxy.auth ? '(with auth)' : ''}`, 'info');
    } else if (rawProxy) {
      log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–∫—Å–∏: "${rawProxy}"`, 'warn');
    }

    browser = await puppeteer.launch({
      headless: finalHeadlessMode,
      slowMo: config.slowMo,
      userDataDir: PROFILE_DIR,
      executablePath: (config.useSystemChrome && (config.chromePath || process.env.CHROME_PATH)) || undefined,
      args: launchArgs
    });

    page = await browser.newPage();
    await page.setViewport({ width:1920, height:1080 });

    // User-Agent + —è–∑—ã–∫/—Ç–∞–π–º–∑–æ–Ω–∞
    const __ua = await browser.userAgent();
    await page.setUserAgent(__ua);
    if (config.acceptLanguage) {
      await page.setExtraHTTPHeaders({ 'Accept-Language': config.acceptLanguage });
    }
    if (config.timezone) {
      try { await page.emulateTimezone(config.timezone); } catch {}
    }

    // –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    if (parsedProxy && parsedProxy.auth) {
      try {
        await page.authenticate(parsedProxy.auth);
        log('üîê –ü—Ä–æ–∫—Å–∏-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.', 'info');
      } catch (e) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ page.authenticate: ${e.message}`, 'warn');
      }
    }

    // –ü–∞—Ç—á–∏ –¥–æ –ª—é–±–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.evaluateOnNewDocument(() => {
      if (!Event.prototype.__ab_trusted) {
        [Event, MouseEvent, KeyboardEvent, UIEvent].forEach(C => {
          Object.defineProperty(C.prototype, 'isTrusted', { get(){ return true; }, configurable:true });
        });
        Event.prototype.__ab_trusted = true;
      }
      if (window.requestAnimationFrame && !window.requestAnimationFrame.__ab_patched) {
        const orig = window.requestAnimationFrame;
        let last = performance.now();
        const MIN = 1000/60;
        window.requestAnimationFrame = cb => {
          const now = performance.now();
          if (document.hidden && now - last >= MIN) {
            last = now;
            try { cb(now); } catch {}
          }
          return orig(cb);
        };
        window.requestAnimationFrame.__ab_patched = true;
      }
      if (!window.__ab_timers_patched) {
        const MIN = 4;
        const oTO = window.setTimeout, oTI = window.setInterval;
        window.setTimeout  = (cb, d=0, ...a) => oTO(cb, Math.max(d,MIN), ...a);
        window.setInterval = (cb, d=0, ...a) => oTI(cb, Math.max(d,MIN), ...a);
        window.__ab_timers_patched = true;
      }
      if (document.hasFocus && !document.hasFocus.__ab_patched) {
        document.hasFocus = () => true;
        document.hasFocus.__ab_patched = true;
      }
      // –∑–∞–≥–ª—É—à–∫–∞ Notification (—É—Å—Ç—Ä–∞–Ω–∏—Ç—å "Notification is not defined")
      if (typeof window.Notification === 'undefined') {
        window.Notification = function(){};
        window.Notification.permission = 'default';
        window.Notification.requestPermission = async ()=>'denied';
      }
    });

    // Expose –¥–ª—è –∫–ª–∏–∫–æ–≤ –∏ –ª–æ–≥–æ–≤
    await page.exposeFunction('doPuppeteerClick', async (x,y) => {
      try {
        await page.mouse.move(x,y,{steps:rnd(10,20)});
        await page.mouse.down();
        await sleep(rnd(40,120));
        await page.mouse.up();
      } catch (e) {
        if (!e.message.includes('Session closed') && !e.message.includes('Target closed')) {
          log(`‚ùå –û—à–∏–±–∫–∞ doPuppeteerClick: ${e.message}`, 'error');
        }
      }
    });
    await page.exposeFunction('logFromClient', (msg, lvl='info') => {
      const cleanedMsg = msg.startsWith('[Client] ') ? msg.substring('[Client] '.length) : msg;
      log(`[Client] ${cleanedMsg}`, lvl);
    });

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`, 'error');
    throw error;
  }
}

/* ===== 7. –°–ª—É—à–∞—Ç–µ–ª–∏ =============================== */
function listeners() {
  page.on('console', msg => {
    if (msg.text().includes('Unable to preventDefault inside passive event listener invocation.') ||
        msg.text().includes('Touch event suppression') ||
        msg.text().includes('The default unity loader module is not available on this platform') ||
        msg.text().includes('DevTools listening on')) return;
    log(`[PAGE CONSOLE] ${msg.text()}`, 'debug');
  });
  page.on('pageerror', err => {
    if (!/Minified React error #\d+|TypeError: Cannot set properties of null|ResizeObserver loop limit exceeded/.test(err.message))
      log(`‚ùå JS Error: ${err.message}`, 'error');
  });
  page.on('requestfailed', req => {
    if (req.failure()?.errorText !== 'net::ERR_ABORTED')
      log(`‚ö†Ô∏è Request Failed: ${req.url()} ‚Äì ${req.failure()?.errorText}`, 'warn');
  });
}

/* ===== 8. –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ =================== */
let reloadTimer = null;
let consecutiveErrors = 0;
const MAX_CONSECUTIVE_ERRORS = 5;

async function gotoIfNeeded(url, label='') {
  const cur = page.url().replace(/\/+$/,'');
  const dest = url.replace(/\/+$/,'');
  if (cur === dest) return;
  log(`‚Ü™Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ ${label || url} ...`, 'info');
  navigating = true;
  await page.goto(url, { waitUntil:'networkidle2', timeout:60000 });
  navigating = false;
  await sleep(1000 + rnd(250,750));
}

async function hardReload() {
  log('üö® –ñ—ë—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', 'warn');

  if (config.rotateProxyOnReload && Array.isArray(config.proxies) && config.proxies.length) {
    try { if (browser) await browser.close(); } catch {}
    await launch(); // —Ä–µ–ª–æ–Ω—á —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–æ–≤–æ–π –ø—Ä–æ–∫—Å–µ–π
    scheduleReload();
    return;
  }

  stats.reloadCount++;
  await save(config.statsFilePath, stats);
  clearTimeout(reloadTimer);
  navigating = true;

  try {
    await fs.mkdir('./screenshots', { recursive: true });
    await page.screenshot({ path: `./screenshots/reload_before_${Date.now()}.png` });
    log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π.', 'debug');
  } catch (e) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π: ${e.message}`, 'error');
  }

  try {
    await page.goto('about:blank');
    await page.goto(`https://geturanium.io/?_=${Date.now()}`, { waitUntil:'networkidle2', timeout:60000 });
    log(`‚ÑπÔ∏è URL –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${page.url()}`, 'info');

    if (page.url().includes('/auth')) {
      log('üîë –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∂–¥—ë–º –≤—Ö–æ–¥–∞‚Ä¶', 'info');
      await page.waitForNavigation({ waitUntil:'networkidle2', timeout:180000 })
        .catch(e => log(`‚åõ –¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}`, 'warn'));
      log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'info');
    } else {
      log('‚úÖ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.', 'info');
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ goto –≤–æ –≤—Ä–µ–º—è hardReload: ${error.message}`, 'error');
    await launch();
  }
  navigating = false;
  await sleep(3000);
  scheduleReload();
}
function scheduleReload() {
  clearTimeout(reloadTimer);
  if (config.autoReload) {
    log(`‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ ${config.reloadMinutes} –º–∏–Ω.`, 'info');
    reloadTimer = setTimeout(hardReload, config.reloadMinutes*60000);
  }
}

/* ===== 9. –°–∫—Ä–∏–ø—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã (evaluate) ================== */
/**
 * mode: 'refinery' | 'home'
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { updatedStats, updatedLastClick, updatedBackoffUntil, updatedNextLogValue, action, which?, waitDuration? }
 */
async function runClient(mode) {
  return await page.evaluate(async (cfg, initialStats, initialLastClick, mode) => {
    const LABELS = {
      autoAC:'auto collector',
      autoSM:'shard multiplier',
      autoCB:'conveyor booster',
      autoFarm:'farm reward',
      autoRefine:'initiate uranium refining'
    };

    // –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ Node –≤–Ω—É—Ç—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let _lastClick    = { ...(window._ab_lastClick || {}), ...initialLastClick };
    let _stats        = window._ab_stats || initialStats;
    let _backoffUntil = window._ab_backoffUntil || 0;
    let _nextLogValue = window._ab_nextLogValue || Date.now();

    const rnd = (min,max)=> (min + Math.random()*(max-min)) | 0;

    const clientLog = (msg, level='info') => {
      const now = Date.now();
      if (level === 'error' || level === 'warn') {
        if (window.logFromClient) window.logFromClient(msg, level);
      } else if (cfg.logEach > 0 && now >= _nextLogValue) {
        if (window.logFromClient) window.logFromClient(msg, level);
        _nextLogValue = now + cfg.logEach * 1000;
      }
    };

    async function clientDoClick(el) {
      if (!el) { clientLog('[Client] –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.', 'warn'); return; }
      try { el.scrollIntoView({ block: 'center' }); } catch {}
      await new Promise(r => setTimeout(r, 150 + Math.random()*250));
      const rect = el.getBoundingClientRect();
      if (!rect.width || !rect.height) { clientLog('[Client] –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ–≤–∏–¥–∏–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.', 'warn'); return; }
      const x = rect.left + Math.random() * rect.width;
      const y = rect.top  + Math.random() * rect.height;
      if (window.doPuppeteerClick) { await window.doPuppeteerClick(x, y); }
      else { clientLog('[Client WARN] doPuppeteerClick –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Ç–∏–≤–Ω—ã–π click().', 'warn'); el.click(); }
    }

    function findBtnByText(text){
      const needle = String(text||'').toLowerCase().replace(/\s+/g,' ').trim();
      const buttons = [...document.querySelectorAll('button')];
      for (const btn of buttons) {
        const t = (btn.innerText||'').toLowerCase().replace(/\s+/g,' ').trim();
        if (t.includes(needle)) return btn;
      }
      const potentials = [...document.querySelectorAll('h1,h2,h3,div,span,p')];
      for (const el of potentials) {
        const t = (el.innerText||'').toLowerCase().replace(/\s+/g,' ').trim();
        if (t.includes(needle)) {
          const button = el.closest('button') || el.parentElement?.querySelector('button');
          if (button) return button;
        }
      }
      return null;
    }

    function getCooldown(btn){
      if (!btn || btn.disabled === false) return 0;
      if (/activating|processing/i.test(btn.innerText)) return 3000;
      const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText); if (m) return (+m[1]*60 + +m[2]) * 1000;
      const s = /(\d+)\s*s/i.exec(btn.innerText); return s ? +s[1]*1000 : 600000;
    }

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –¥–ª—è 429/403
    if (!window.__ab_fetch_patched) {
      const nativeFetch = window.fetch.bind(window);
      window.fetch = async (...args) => {
        try {
          const res = await nativeFetch(...args);
          if (res.status === 429) {
            _backoffUntil = Date.now() + 5*60*1000;
            clientLog('[Client] 429 Too Many Requests ‚Üí –ø–∞—É–∑–∞ 5 –º–∏–Ω.', 'warn');
          }
          if (res.status === 403) {
            clientLog('[Client] 403 Forbidden ‚Üí –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.', 'warn');
            return Promise.reject(new Error('403 Forbidden detected.'));
          }
          return res;
        } catch (error) {
          clientLog('[Client] fetch error: ' + error.message, 'error');
          throw error;
        }
      };
      window.__ab_fetch_patched = true;
    }

    const now = Date.now();
    if (now < _backoffUntil) {
      clientLog(`[Client] –ü–∞—É–∑–∞ –¥–æ ${new Date(_backoffUntil).toLocaleTimeString()}.`);
      return {
        updatedStats:_stats, updatedLastClick:_lastClick,
        updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
        action:'waiting_backoff', waitDuration:_backoffUntil - now
      };
    }

    // === –†–ï–§–ê–ô–ù–ï–†–ò ===
    if (mode === 'refinery') {
      if (!cfg.autoRefine) {
        return {
          updatedStats:_stats, updatedLastClick:_lastClick,
          updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
          action:'no_action', waitDuration: 15000 + rnd(0,5000)
        };
      }

      // –∫–Ω–æ–ø–∫–∞ "initiate uranium refining"
      const btn = findBtnByText('initiate uranium refining');

      // —á–∏—Ç–∞–µ–º "Available/Your Shards" –∏ "Required"
      let currentPoints = 0, requiredPoints = 0;
      try {
        const shardsEl = [...document.querySelectorAll('span,div')]
          .find(el => /available shards|your shards/i.test(el.innerText||''));
        const requiredEl = [...document.querySelectorAll('span,div')]
          .find(el => /required input|required shards|minimum threshold/i.test(el.innerText||''));
        if (shardsEl) {
          const n = (shardsEl.nextElementSibling?.innerText || shardsEl.innerText || '').replace(/[^0-9]/g,'');
          currentPoints = parseInt(n)||0;
        }
        if (requiredEl) {
          const n = (requiredEl.nextElementSibling?.innerText || requiredEl.innerText || '').replace(/[^0-9]/g,'');
          requiredPoints = parseInt(n)||0;
        }
      } catch {}

      if (btn && !btn.disabled && currentPoints >= requiredPoints) {
        clientLog('[Refinery] –ö–ª–∏–∫–∞—é ¬´INITIATE URANIUM REFINING¬ª.', 'info');
        await clientDoClick(btn);
        _lastClick.autoRefine = now;
        _stats.clickCount.autoRefine = (_stats.clickCount.autoRefine||0) + 1;
        return {
          updatedStats:_stats, updatedLastClick:_lastClick,
          updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
          action:'clicked', which:'autoRefine', waitDuration: 3000 + rnd(0,1000)
        };
      }

      const cd = getCooldown(btn) || 10000;
      return {
        updatedStats:_stats, updatedLastClick:_lastClick,
        updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
        action:'no_action', waitDuration: cd + rnd(500,2000)
      };
    }

    // === –ì–õ–ê–í–ù–ê–Ø: –±—É—Å—Ç—ã ===
    if (mode === 'home') {
      const BOOST_KEYS = ['autoAC','autoSM','autoCB'];
      let minWait = Infinity;

      for (const key of BOOST_KEYS) {
        if (!cfg[key]) continue;

        const btn = (key==='autoAC') ? findBtnByText('auto collector')
                  : (key==='autoSM') ? findBtnByText('shard multiplier')
                  : findBtnByText('conveyor booster');

        if (!btn) { minWait = Math.min(minWait, 10000); continue; }

        const cooldown = getCooldown(btn);
        if (btn.disabled && cooldown > 0) { minWait = Math.min(minWait, cooldown); continue; }

        if (!btn.disabled) {
          const since   = now - (_lastClick[key] || 0);
          const base    = (cfg.boostIntervalMs || 300000);
          const jitter  = (cfg.boostJitterMs  || 15000);
          const gap     = base + rnd(-jitter, jitter);

          if (since > gap) {
            clientLog(`[Boosts] –ù–∞–∂–∏–º–∞—é ${key}.`, 'info');
            await clientDoClick(btn);
            _lastClick[key] = now;
            _stats.clickCount[key] = (_stats.clickCount[key]||0) + 1;
            return {
              updatedStats:_stats, updatedLastClick:_lastClick,
              updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
              action:'clicked', which:key, waitDuration: 2000 + rnd(0,1500)
            };
          } else {
            minWait = Math.min(minWait, gap - since);
          }
        }
      }

      // keep-alive
      if (cfg.keepAlive && rnd(0,10) < 2) {
        fetch('/favicon.ico',{cache:'no-store',mode:'no-cors'}).catch(()=>{});
        const body = document.body;
        if (body) {
          const rect = body.getBoundingClientRect();
          const x = rect.left + Math.random()*rect.width;
          const y = rect.top  + Math.random()*rect.height;
          body.dispatchEvent(new MouseEvent('mousemove',{bubbles:true,clientX:x,clientY:y}));
          window.scrollBy(0, rnd(-1,1));
        }
        document.dispatchEvent(new Event('focus',{bubbles:true}));
        document.dispatchEvent(new Event('blur',{bubbles:true}));
        clientLog('[Boosts] Keep-Alive.', 'info');
      }

      return {
        updatedStats:_stats, updatedLastClick:_lastClick,
        updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
        action:'no_action',
        waitDuration: (minWait===Infinity ? 10000 + rnd(0,5000) : minWait + rnd(500,2000))
      };
    }

    // fallback
    return {
      updatedStats:_stats, updatedLastClick:_lastClick,
      updatedBackoffUntil:_backoffUntil, updatedNextLogValue:_nextLogValue,
      action:'no_action', waitDuration: 10000 + rnd(0,5000)
    };
  }, config, stats, lastClick, mode);
}

/* ===== 10. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ /refinery ================== */
const EIGHT_HOURS = 8*60*60*1000;
function recomputeNextRefineryVisit() {
  // –∏–¥—Ç–∏ –Ω–∞ /refinery —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–¥–æ—à–ª–æ –æ–∫–Ω–æ 8 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞
  // –µ—Å–ª–∏ –Ω–∏ —Ä–∞–∑—É –Ω–µ –∫–ª–∏–∫–∞–ª–∏ ‚Äî –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ä–∞–∑—É
  const last = lastClick.autoRefine || 0;
  if (!last) {
    nextRefineryVisitAt = Date.now(); // —Å–µ–π—á–∞—Å
  } else {
    // —Ä–∞–Ω–Ω–∏–π –∑–∞—Ö–æ–¥ –∑–∞ ~90 —Å–µ–∫ –¥–æ –∫–æ–Ω—Ü–∞ –æ–∫–Ω–∞
    nextRefineryVisitAt = last + EIGHT_HOURS - 90*1000;
  }
  // –Ω–æ –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 3 —á–∞—Å–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  const minNext = Date.now() + 3*60*60*1000;
  if (nextRefineryVisitAt < minNext && last) nextRefineryVisitAt = minNext;
  log(`üìÖ –°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç –Ω–∞ /refinery ‚âà ${new Date(nextRefineryVisitAt).toLocaleTimeString()}`, 'info');
}

/* ===== 11. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ========================== */
async function mainLoop() {
  let navigationStuckTimer = null;
  let lastXu = 0, lastTS = Date.now();

  log('‚úÖ mainLoop: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.', 'success');

  // –°—Ç–∞—Ä—Ç—É–µ–º —Å –≥–ª–∞–≤–Ω–æ–π
  await gotoIfNeeded('https://www.geturanium.io/', '–≥–ª–∞–≤–Ω—É—é');

  while (true) {
    if (navigating) {
      log('mainLoop: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –∂–¥–µ–º...', 'debug');
      if (!navigationStuckTimer) {
        navigationStuckTimer = setTimeout(async () => {
          log('‚ö†Ô∏è mainLoop: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.', 'warn');
          await hardReload();
          navigationStuckTimer = null;
        }, 15000);
      }
      await sleep(500);
      continue;
    } else {
      if (navigationStuckTimer) { clearTimeout(navigationStuckTimer); navigationStuckTimer = null; }
    }

    const now = Date.now();

    // ======= –ü–ª–∞–Ω–æ–≤—ã–π –≤–∏–∑–∏—Ç –Ω–∞ /refinery (–ù–ï –ø—Ä—ã–≥–∞–µ–º –±–µ–∑ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏) =======
    if (now >= (nextRefineryVisitAt || 0)) {
      await gotoIfNeeded('https://www.geturanium.io/refinery', '/refinery');

      let r;
      try {
        r = await runClient('refinery');
      } catch (e) {
        log(`‚ùå –û—à–∏–±–∫–∞ –≤ runClient('refinery'): ${e.message}`, 'error');
        r = { action:'no_action', waitDuration: 15000 };
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –¥–ª—è /refinery
      if (r.action === 'clicked' && r.which === 'autoRefine') {
        // –∂–¥—ë–º –¥–æ 8—Å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —É—à–ª–∞ –≤ –∫–¥/–∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        const ok = await page.evaluate(async () => {
          function findBtn(text){
            const needle = String(text||'').toLowerCase().replace(/\s+/g,' ').trim();
            const buttons = [...document.querySelectorAll('button')];
            for (const btn of buttons) {
              const t = (btn.innerText||'').toLowerCase().replace(/\s+/g,' ').trim();
              if (t.includes(needle)) return btn;
            }
            return null;
          }
          for (let i=0;i<8;i++){
            const btn = findBtn('initiate uranium refining');
            if (!btn) return true;
            if (btn.disabled || /cooldown|processing|active/i.test(btn.innerText||'')) return true;
            await new Promise(res=>setTimeout(res,1000));
          }
          return false;
        });

        if (ok) {
          log('‚ö° [Refinery] –ö–ª–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.', 'info');
          lastClick.autoRefine = Date.now();
          stats.clickCount.autoRefine = (stats.clickCount.autoRefine||0) + 1;
          // –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤ - 90—Å
          recomputeNextRefineryVisit();
        } else {
          log('‚ö†Ô∏è [Refinery] –ö–ª–∏–∫ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è. –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ.', 'warn');
          // –ø–æ–≤—Ç–æ—Ä–∏–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
          nextRefineryVisitAt = Date.now() + 5*60*1000;
          log(`üìÖ –°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç –Ω–∞ /refinery ‚âà ${new Date(nextRefineryVisitAt).toLocaleTimeString()}`, 'info');
        }
      } else {
        log('üêû [Refinery] –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ/–∫–¥).', 'debug');
        // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ —á–∞—â–µ 5 –º–∏–Ω—É—Ç
        const waitMs = Math.max(5*60*1000, (r.waitDuration||30000));
        nextRefineryVisitAt = Date.now() + waitMs;
        log(`üìÖ –°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç –Ω–∞ /refinery ‚âà ${new Date(nextRefineryVisitAt).toLocaleTimeString()}`, 'info');
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–ª–∏–∫–∞—Ç—å –±—É—Å—Ç—ã
      await gotoIfNeeded('https://www.geturanium.io/', '–≥–ª–∞–≤–Ω—É—é');

      // –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö
      await sleep(1500);
    }

    // ======= –ë—É—Å—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π (–±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏) =======
    let homeRes;
    try {
      homeRes = await runClient('home');
    } catch (e) {
      log(`‚ùå –û—à–∏–±–∫–∞ –≤ runClient('home'): ${e.message}`, 'error');
      homeRes = { action:'no_action', waitDuration: 10000 };
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –¥–ª—è –±—É—Å—Ç–æ–≤
    if (homeRes.action === 'clicked' && homeRes.which) {
      const which = homeRes.which; // autoAC / autoSM / autoCB
      const ok = await page.evaluate(async (which) => {
        function findBtnByKey(k){
          const map = {
            autoAC: 'auto collector',
            autoSM: 'shard multiplier',
            autoCB: 'conveyor booster'
          };
          const needle = map[k];
          const buttons = [...document.querySelectorAll('button')];
          for (const btn of buttons) {
            const t = (btn.innerText||'').toLowerCase().replace(/\s+/g,' ').trim();
            if (t.includes(needle)) return btn;
          }
          return null;
        }
        for (let i=0;i<6;i++){
          const btn = findBtnByKey(which);
          if (!btn) return true;
          if (btn.disabled || /cooldown|processing|active/i.test(btn.innerText||'')) return true;
          await new Promise(res=>setTimeout(res,1000));
        }
        return false;
      }, which);

      if (ok) {
        log(`‚ö° [Boosts] –ö–ª–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (${which}).`, 'info');
        lastClick[which] = Date.now();
        stats.clickCount[which] = (stats.clickCount[which]||0) + 1;
      } else {
        log(`‚ö†Ô∏è [Boosts] –ö–ª–∏–∫ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è (${which}).`, 'warn');
        // —Å–±—Ä–æ—Å–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–∫–Ω–µ
        lastClick[which] = 0;
      }

      // –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ ‚Äî –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      await sleep(rnd(2000, 5000));
    } else {
      // –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥—ë–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ø—Ä–æ—Å–∏–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      const wait = Math.max(1000, Math.min(homeRes.waitDuration||10000, 60000));
      log(`üêû [Boosts] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ü–∞—É–∑–∞ ${Math.round(wait/1000)}—Å.`, 'debug');
      await sleep(wait);
    }

    // ======= –°–µ—Ä–≤–∏—Å–Ω—ã–µ –≤–µ—â–∏ =======
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ XU
    try {
      const xu = await page.evaluate(() =>
        +document.querySelector('span.text-sm.font-medium.text-amber-400.drop-shadow-sm.tracking-wide')
          ?.textContent.replace(/\s/g,'').replace(',','.') || 0
      );
      if (xu !== lastXu) { lastXu = xu; lastTS = Date.now(); }
      if (Date.now() - lastTS > 50*60*1000 && xu > 0) {
        log('üõë XU —Å—Ç–∞—Ç–∏—á–µ–Ω 50 –º–∏–Ω ‚Äì reload', 'warn');
        await hardReload();
        lastTS = Date.now();
      }
    } catch(e) {
      log(`‚ùå mainLoop: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ XU: ${e.message}`, 'error');
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies
    if (Date.now() - lastCookieSave > 5*60*1000) {
      try {
        const cookiesToSave = await page.cookies();
        await save(config.cookiesFilePath, cookiesToSave);
        log(`üíæ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${cookiesToSave.length})`, 'info');
        lastCookieSave = Date.now();
      } catch (e) {
        log(`‚ùå mainLoop: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏: ${e.message}`, 'error');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º stats + lastClick
    stats.lastClick = { ...lastClick };
    await save(config.statsFilePath, stats);
  }
}

/* ===== 12. –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ ========================== */
(async () => {
  process.on('unhandledRejection', (reason, promise) => {
    log(`üö® Unhandled Rejection at: ${promise}, reason: ${reason}`, 'error');
    if (browser) {
      browser.close().catch(e => log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–∑ unhandledRejection: ${e.message}`, 'error'));
    }
    process.exit(1);
  });

  log('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...', 'info');
  config = { ...DEF, ...(await load(DEF.configFilePath, {})) };

  // –ì—Ä—É–∑–∏–º stats (–≤–∫–ª—é—á–∞—è lastClick, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–∞–Ω–µ–µ)
  const loadedStats = await load(DEF.statsFilePath, {});
  stats = { ...stats, ...loadedStats };
  if (!stats.lastClick) stats.lastClick = { autoAC:0, autoSM:0, autoCB:0, autoFarm:0, autoRefine:0 };
  lastClick = { ...stats.lastClick };

  try {
    await launch();
    listeners();

    // –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ /refinery
    recomputeNextRefineryVisit();

    // —Å—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ SIGINT
    process.on('SIGINT', async () => {
      log('SIGINT, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º...', 'info');
      try {
        const cook = await page.cookies().catch(()=>[]);
        await save(config.cookiesFilePath, cook);
        stats.lastClick = { ...lastClick };
        await save(config.configFilePath, config);
        await save(config.statsFilePath, stats);
      } catch (e) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${e.message}`, 'warn');
      }
      if (browser) await browser.close();
      process.exit(0);
    });

    scheduleReload();
    await mainLoop();

  } catch (initialError) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: ${initialError.message}`, 'error');
    if (browser) {
      await browser.close().catch(e => log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: ${e.message}`, 'error'));
    }
    process.exit(1);
  }
})();
