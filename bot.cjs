// bot.cjs
const fs    = require('fs').promises;
const path  = require('path');
const puppeteer = require('puppeteer');

/* ===== 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é =================== */
const DEF = {
  enabled:true,
  autoAC:true, autoSM:true, autoCB:true, autoFarm:true, autoRefine:true,
  keepAlive:true,
  autoReload:true, reloadMinutes:50,
  logEach:250, // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å Node.js –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 2 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
  headless:false, // <--- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å false –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞!
  slowMo:0,
  cookiesFilePath:'./cookies.json',
  configFilePath :'./config.json',
  statsFilePath  :'./stats.json',
  backoffUntil:0 // –ü–µ—Ä–µ–¥–∞–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç
};

/* ===== 2. –°–æ—Å—Ç–æ—è–Ω–∏–µ ================================= */
let config = { ...DEF };
let stats  = { reloadCount:0,
               clickCount:{autoAC:0,autoSM:0,autoCB:0,autoFarm:0,autoRefine:0}};
let cookies=[], navigating=false;
let lastCookieSave = Date.now();
let browser, page; // –£–±—Ä–∞–ª–∏ gameFrame, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º –≤ page
// let gameFrame; // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

// –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Node.js
let clientBackoffUntil = 0;
let clientStats = {};
let clientLastClick = {};

/* ===== 3. –õ–æ–≥–≥–µ—Ä =================================== */
const COLOR = { info: 34, warn: 33, error: 31, debug: 36 };
// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ (–≤–∫–ª—é—á–∞—è debug), 1 –¥–ª—è info+, 2 –¥–ª—è warn+, 3 –¥–ª—è error+
const MIN_LOG_LEVEL_INDEX = 0; // –í—Ä–µ–º–µ–Ω–Ω–æ 0 –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 1.
const LOG_LEVELS = ['debug', 'info', 'warn', 'error'];

function log(msg, level = 'info') {
  const levelIndex = LOG_LEVELS.indexOf(level);
  if (levelIndex < MIN_LOG_LEVEL_INDEX) {
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏, –µ—Å–ª–∏ –∏—Ö —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
  }

  const time = new Date().toLocaleTimeString('ru-RU');
  const prefix = { info:'‚ÑπÔ∏è', warn:'‚ö†Ô∏è', error:'üö®', debug:'üêû' }[level] || ' ';
  console.log(`\x1b[${COLOR[level]||37}m[${time}] ${prefix} ${msg}\x1b[0m`);
}

/* ===== 4. –£—Ç–∏–ª–∏—Ç—ã ================================== */
const rnd = (a,b) => Math.floor(a + Math.random()*(b-a)|0);
const sleep = ms => new Promise(r => setTimeout(r, ms));

/* ===== 5. –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ======================= */
async function ensureDir(file) {
  await fs.mkdir(path.dirname(path.resolve(file)), { recursive:true });
}
async function load(file, def) {
  try { return JSON.parse(await fs.readFile(path.resolve(file), 'utf8')); }
  catch (e) {
      log(`Error loading ${file}: ${e.message}`, 'warn');
      return def;
  }
}
async function save(file, data) {
  await ensureDir(file);
  await fs.writeFile(path.resolve(file), JSON.stringify(data, null, 2), 'utf8');
}

/* ===== 6. –ó–∞–ø—É—Å–∫ Puppeteer ======================== */
const PROFILE_DIR = path.resolve(__dirname, 'browser_profile');
async function launch() {
  browser = await puppeteer.launch({
    headless: process.env.HEADLESS ? 'new' : config.headless,
    slowMo: ¬† +process.env.SLOWMO || config.slowMo,
    userDataDir: PROFILE_DIR,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--window-size=1920,1080',
      '--disable-blink-features=AutomationControlled'
    ]
  });
  page = await browser.newPage();
  await page.setViewport({ width:1920, height:1080 });
  await page.setUserAgent(
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ' +
    '(KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
  );
  // –ó–¥–µ—Å—å –Ω–µ –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–ø—Ä–∞–≤–ª—è–µ–º navigating –≤—Ä—É—á–Ω—É—é

  await page.evaluateOnNewDocument(() => {
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è
    if (!Event.prototype.__ab_trusted) {
      [Event, MouseEvent, KeyboardEvent, UIEvent].forEach(C=>{
        Object.defineProperty(C.prototype,'isTrusted',{
          get(){return true;}, configurable:true
        });
      });
      Event.prototype.__ab_trusted = true;
    }
    if (window.requestAnimationFrame && !window.requestAnimationFrame.__ab_patched) {
      const orig = window.requestAnimationFrame;
      let last = performance.now();
      const MIN = 1000/60;
      window.requestAnimationFrame = cb => {
        const now = performance.now();
        if (document.hidden && now - last >= MIN) {
          last = now;
          try { cb(now); } catch {}
        }
        return orig(cb);
      };
      window.requestAnimationFrame.__ab_patched = true;
    }
    if (!window.__ab_timers_patched) {
      const MIN = 4;
      const oTO = window.setTimeout, oTI = window.setInterval;
      window.setTimeout = (cb, d=0, ...a) => oTO(cb, Math.max(d,MIN), ...a);
      window.setInterval= (cb, d=0, ...a) => oTI(cb, Math.max(d,MIN), ...a);
      window.__ab_timers_patched = true;
    }
    if (document.hasFocus && !document.hasFocus.__ab_patched) {
      document.hasFocus = ()=> true;
      document.hasFocus.__ab_patched = true;
    }
  });

  // Expose functions to the main page context
  await page.exposeFunction('doPuppeteerClick', async (x,y) => {
    try {
      await page.mouse.move(x,y,{steps:rnd(10,20)});
      await page.mouse.down();
      await sleep(rnd(40,120));
      await page.mouse.up();
    } catch (e) {
        if (!e.message.includes('Session closed') && !e.message.includes('Target closed')) {
            log(`‚ùå –û—à–∏–±–∫–∞ doPuppeteerClick: ${e.message}`, 'error');
        }
    }
  });
  await page.exposeFunction('logFromClient', (msg, lvl='info') => {
    log(`[Client] ${msg}`, lvl);
  });
}

/* ===== 7. –°–ª—É—à–∞—Ç–µ–ª–∏ =============================== */
function listeners() {
  page.on('pageerror', err => {
    if (!/Minified React error #\d+|TypeError: Cannot set properties of null|ResizeObserver loop limit exceeded/.test(err.message))
      log(`‚ùå JS Error: ${err.message}`, 'error');
  });
  page.on('requestfailed', req => {
    if (req.failure()?.errorText !== 'net::ERR_ABORTED')
      log(`‚ö†Ô∏è Request Failed: ${req.url()} ‚Äì ${req.failure()?.errorText}`, 'warn');
  });
}

/* ===== 8. –ñ—ë—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ =================== */
let reloadTimer = null;
async function hardReload() {
  log('üö® –ñ—ë—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', 'warn');
  stats.reloadCount++;
  await save(config.statsFilePath, stats);
  clearTimeout(reloadTimer);
  navigating = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º navigating –≤ true –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
  // gameFrame = null; // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
  // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  try {
      await fs.mkdir('./screenshots', { recursive: true });
      await page.screenshot({ path: `./screenshots/reload_before_${Date.now()}.png` });
      log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π.', 'debug');
  } catch (e) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π: ${e.message}`, 'error');
  }

  await page.goto('about:blank');
  await page.goto(`https://geturanium.io/?_=${Date.now()}`, { waitUntil:'networkidle2', timeout:60000 }); // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
  navigating = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º navigating –ø–æ—Å–ª–µ goto
  await sleep(3000);
  scheduleReload();
}
function scheduleReload() {
  clearTimeout(reloadTimer);
  if (config.autoReload) {
    log(`‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ ${config.reloadMinutes} –º–∏–Ω.`, 'info');
    reloadTimer = setTimeout(hardReload, config.reloadMinutes*60000);
  }
}

/* ===== 9. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ========================== */
async function mainLoop() {
  let lastXu = 0, lastTS = Date.now();
  let navigationStuckTimer = null;

  log('‚úÖ mainLoop: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.', 'debug');

  while (true) {
    // –í —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏, navigating –±—É–¥–µ—Ç true —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è page.goto()
    // –∏ –∑–∞—Ç–µ–º —Å—Ä–∞–∑—É —Å–±—Ä–æ—Å–∏—Ç—Å—è. –¢–∞–∫ —á—Ç–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–¥–∫–æ.
    if (navigating) {
      log('mainLoop: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –∂–¥–µ–º...', 'debug');
      if (!navigationStuckTimer) {
          navigationStuckTimer = setTimeout(async () => {
              log('‚ö†Ô∏è mainLoop: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.', 'warn');
              await hardReload();
              navigationStuckTimer = null;
          }, 15000);
      }
      await sleep(500);
      continue;
    } else {
        if (navigationStuckTimer) {
            clearTimeout(navigationStuckTimer);
            navigationStuckTimer = null;
        }
    }

    // 1) –ë–æ–ª—å—à–µ –Ω–µ –∏—â–µ–º iframe, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å page
    // log('mainLoop: –ü—Ä–æ–≤–µ—Ä—è–µ–º gameFrame.', 'debug'); // –≠—Ç–æ—Ç –ª–æ–≥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    // if (!gameFrame) { ... } // –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

    log('mainLoop: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç.', 'debug');

    // 2) –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let updatedClientData;
    try {
        updatedClientData = await page.evaluate(async (cfg, initialStats) => {
            const LABELS={
              autoAC:'auto collector',
              autoSM:'shard multiplier',
              autoCB:'conveyor booster',
              autoFarm:'farm reward',
              autoRefine:'start refining'
            };
            let _lastClick = window._ab_lastClick || {};
            let _stats = window._ab_stats || initialStats;
            let _backoffUntil = window._ab_backoffUntil || 0;
            let _nextLogValue = window._ab_nextLogValue || Date.now();

            const rnd = (min,max)=> min + Math.random()*(max-min)|0;
            const cdParse = s=>{
              let m=/(\d+)\s*m.*?(\d+)\s*s/i.exec(s);if(m)return(+m[1]*60+ +m[2])*1e3;
              m=/(\d+)\s*s/i.exec(s);return m? +s[1]*1e3:600000;
            };

            // –¢–µ–ø–µ—Ä—å clientLog –∏ clientDoClick –≤—ã–∑—ã–≤–∞—é—Ç exposeFunction –Ω–∞–ø—Ä—è–º—É—é –∏–∑ `window` (page context)
            const clientLog = (msg, level='info') => {
              const now = Date.now();
              if (level === 'error' || level === 'warn' || (cfg.logEach > 0 && now >= _nextLogValue)) {
                if (window.logFromClient) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exposed —Ñ—É–Ω–∫—Ü–∏–∏
                  window.logFromClient(msg, level);
                }
                if (level !== 'error' && level !== 'warn') {
                    _nextLogValue = now + cfg.logEach * 1000;
                }
              }
            };

            async function clientDoClick(el) {
              if (!el) { clientLog('[Client] –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.', 'warn'); return; }
              const rect = el.getBoundingClientRect();
              if (!rect.width || !rect.height) { clientLog('[Client] –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ–≤–∏–¥–∏–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É (–Ω—É–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞).', 'warn'); return; }
              const x = rect.left + Math.random() * rect.width;
              const y = rect.top + Math.random() * rect.height;
              if (window.doPuppeteerClick) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exposed —Ñ—É–Ω–∫—Ü–∏–∏
                await window.doPuppeteerClick(x, y);
              } else {
                clientLog(`[Client WARN] doPuppeteerClick –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞.`, 'warn');
                el.click();
              }
            }

            // *** –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø findBtn: —Ç–µ–ø–µ—Ä—å –∏—â–µ—Ç —Ç–µ–∫—Å—Ç –≤ h3, div, span, p ***
            function findBtn(text){
              const normalizedSearchText = text.toLowerCase().trim();
              const potentialTextElements = [...document.querySelectorAll('h3, div, span, p')].filter(el => {
                  return el.innerText && el.innerText.toLowerCase().includes(normalizedSearchText);
              });

              clientLog(`[Client Debug] Searching for "${text}". Found ${potentialTextElements.length} potential text elements.`, 'debug');

              for (const el of potentialTextElements) {
                  const elText = el.innerText?.toLowerCase().trim();
                  if (elText === normalizedSearchText || elText.startsWith(normalizedSearchText + ' ') || elText.startsWith(normalizedSearchText + '\n')) {
                      const button = el.closest('button');
                      if (button) {
                          clientLog(`[Client Debug] –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç "${el.innerText.trim()}" –∏ –±–ª–∏–∂–∞–π—à–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è "${text}".`, 'debug');
                          return button;
                      } else {
                          clientLog(`[Client Warn] –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç "${el.innerText.trim()}" –¥–ª—è "${text}", –Ω–æ –±–µ–∑ –±–ª–∏–∂–∞–π—à–µ–π –∫–Ω–æ–ø–∫–∏.`, 'warn');
                      }
                  }
              }
              clientLog(`[Client Debug] –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è "${text}".`, 'debug');
              return null;
            }


            function getCooldown(btn){
              if(!btn || btn.disabled===false) return 0;
              if(/activating/i.test(btn.innerText)) return 3000;
              const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);if(m)return(+m[1]*60+ +m[2])*1e3;
              const s = /(\d+)\s*s/i.exec(btn.innerText);return s? +s[1]*1e3:600000;
            }

            // --- –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –¥–ª—è 429 / 403 ---
            if (!window.__ab_fetch_patched) {
                const nativeFetch = window.fetch.bind(window);
                window.fetch = async (...args) => {
                    try {
                        const res = await nativeFetch(...args);
                        if (res.status === 429) {
                            _backoffUntil = Date.now() + 5 * 60 * 1000;
                            clientLog('[Client] –û–±–Ω–∞—Ä—É–∂–µ–Ω 429 (Too Many Requests) ‚Üí —Å—Ç–∞–≤–∏–º –ø–∞—É–∑—É 5 –º–∏–Ω.', 'warn');
                        }
                        if (res.status === 403) {
                            clientLog('[Client] –û–±–Ω–∞—Ä—É–∂–µ–Ω 403 (Forbidden) ‚Üí —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.', 'warn');
                            return Promise.reject(new Error('403 Forbidden detected.'));
                        }
                        return res;
                    } catch (error) {
                        clientLog('[Client] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch –∑–∞–ø—Ä–æ—Å–∞:', error.message, 'error');
                        throw error;
                    }
                };
                window.__ab_fetch_patched = true;
            }

            // --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
            const now = Date.now();
            if (now < _backoffUntil) {
                clientLog(`[Client] –í —Ä–µ–∂–∏–º–µ –ø–∞—É–∑—ã –¥–æ ${new Date(_backoffUntil).toLocaleTimeString()}.`);
                return {
                    updatedStats: _stats,
                    updatedLastClick: _lastClick,
                    updatedBackoffUntil: _backoffUntil,
                    updatedNextLogValue: _nextLogValue,
                    action: 'waiting_backoff'
                };
            }

            let actionTaken = false;
            for (const key of Object.keys(LABELS)) {
                if (!cfg[key]) continue;

                if (key === 'autoFarm') {
                    const eightHoursMs = 8 * 60 * 60 * 1000;
                    const nextFarmTime = (_lastClick[key] || 0) + eightHoursMs;

                    if (now < nextFarmTime) {
                        const remaining = nextFarmTime - now;
                        clientLog(`‚è≥ ${key}: —Å–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ ${Math.round(remaining / 1000 / 60)} –º–∏–Ω.`);
                        continue;
                    }
                }

                const btn = findBtn(LABELS[key]);
                if (!btn) {
                    continue;
                }

                const cooldown = getCooldown(btn);
                clientLog(`[Client] –ö–Ω–æ–ø–∫–∞ "${LABELS[key]}": –Ω–∞–π–¥–µ–Ω–∞, disabled: ${btn.disabled}, –∫—É–ª–¥–∞—É–Ω: ${cooldown / 1000}s.`, 'debug');

                if (btn.disabled && cooldown > 0) {
                    clientLog(`[Client] –ö–Ω–æ–ø–∫–∞ "${LABELS[key]}" –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.`, 'info');
                    continue;
                }

                // –õ–æ–≥–∏–∫–∞ –¥–ª—è autoRefine
                if (key === 'autoRefine') {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —à–∞—Ä–¥–æ–≤
                    let currentPoints = 0;
                    let requiredPoints = 0;

                    const yourShardsLabel = [...document.querySelectorAll('span.font-bold')].find(el => el.innerText.includes('Your Shards'));
                    const requiredShardsLabel = [...document.querySelectorAll('span.font-bold')].find(el => el.innerText.includes('Required Shards'));

                    if (yourShardsLabel && yourShardsLabel.nextElementSibling) {
                        currentPoints = parseInt(yourShardsLabel.nextElementSibling.innerText.replace(/[^0-9]/g, '')) || 0;
                        clientLog(`[Client Debug] Refinery: Current Shards: ${currentPoints}`, 'debug');
                    }
                    if (requiredShardsLabel && requiredShardsLabel.nextElementSibling) {
                        requiredPoints = parseInt(requiredShardsLabel.nextElementSibling.innerText.replace(/[^0-9]/g, '')) || 0;
                        clientLog(`[Client Debug] Refinery: Required Shards: ${requiredPoints}`, 'debug');
                    }

                    if (btn && btn.disabled && currentPoints < requiredPoints) {
                        clientLog(`Refinery: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞—Ä–¥–æ–≤. –ù—É–∂–Ω–æ ${requiredPoints}, —É –≤–∞—Å ${currentPoints}.`, 'info');
                        continue;
                    }
                    if (currentPoints >= requiredPoints && btn && !btn.disabled) {
                        const since = now - (_lastClick[key] || 0);
                        const gap = 5000 + rnd(0, 2000);
                        if (since > gap) {
                            clientLog(`Refinery: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —à–∞—Ä–¥–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞.`, 'info');
                            await clientDoClick(btn);
                            _lastClick[key] = now;
                            _stats.clickCount[key]++;
                            clientLog(`‚ö° ${key} –∫–ª–∏–∫–Ω—É—Ç. –®–∞—Ä–¥–æ–≤: ${currentPoints}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredPoints}.`, 'info');
                            actionTaken = true;
                            return {
                                updatedStats: _stats, updatedLastClick: _lastClick,
                                updatedBackoffUntil: _backoffUntil, updatedNextLogValue: _nextLogValue,
                                action: 'clicked'
                            };
                        } else {
                            clientLog(`Refinery: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —à–∞—Ä–¥–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–æ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (–æ—Å—Ç–∞–ª–æ—Å—å ${((gap - since) / 1000).toFixed(1)}s).`, 'info');
                        }
                    } else {
                        clientLog(`Refinery: –ö–Ω–æ–ø–∫–∞ "${LABELS[key]}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç. –®–∞—Ä–¥–æ–≤: ${currentPoints}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredPoints}.`, 'info');
                        continue;
                    }
                }

                // –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
                const since = now - (_lastClick[key] || 0);
                const gap = 8000 + rnd(0, 2000);

                if (cfg[key] && btn && !btn.disabled && since > gap) {
                    clientLog(`[Client] –ö–Ω–æ–ø–∫–∞ "${LABELS[key]}" –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞.`, 'info');
                    await clientDoClick(btn);
                    _lastClick[key] = now;
                    _stats.clickCount[key]++;
                    clientLog(`‚ö° ${key} –∫–ª–∏–∫–Ω—É—Ç.`, 'info');
                    actionTaken = true;
                    return {
                        updatedStats: _stats, updatedLastClick: _lastClick,
                        updatedBackoffUntil: _backoffUntil, updatedNextLogValue: _nextLogValue,
                        action: 'clicked'
                    };
                } else if (btn && !btn.disabled) {
                    clientLog(`[Client] –ö–Ω–æ–ø–∫–∞ "${LABELS[key]}" –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (–æ—Å—Ç–∞–ª–æ—Å—å ${((gap - since) / 1000).toFixed(1)}s).`, 'info');
                }
            }

            // --- Keep-Alive ---
            if(cfg.keepAlive && rnd(0,10)<2){
              fetch('/favicon.ico',{cache:'no-store',mode:'no-cors'}).catch(()=>{});
              const body = document.body;
              if (body) {
                const rect = body.getBoundingClientRect();
                const x = rect.left + Math.random()*rect.width;
                const y = rect.top  + Math.random()*rect.height;
                body.dispatchEvent(new MouseEvent('mousemove', { bubbles:true, clientX:x, clientY:y }));
                window.scrollBy(0, rnd(-1,1));
              }
              document.dispatchEvent(new Event('focus', {bubbles:true}));
              document.dispatchEvent(new Event('blur', {bubbles:true}));
              clientLog('‚ÑπÔ∏è Keep-Alive –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (client-side).');
            }

            window._ab_lastClick = _lastClick;
            window._ab_stats = _stats;
            window._ab_backoffUntil = _backoffUntil;
            window._ab_nextLogValue = _nextLogValue;

            return {
                updatedStats: _stats,
                updatedLastClick: _lastClick,
                updatedBackoffUntil: _backoffUntil,
                updatedNextLogValue: _nextLogValue,
                action: 'no_action'
            };

        }, config, stats); // –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ config –∏ stats –∏–∑ Node.js

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ (result)
        stats = updatedClientData.updatedStats;
        clientBackoffUntil = updatedClientData.updatedBackoffUntil;

        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–∏–ª –æ –∫–ª–∏–∫–µ, –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
        if (updatedClientData.action === 'clicked') {
            log('mainLoop: –ö–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∏–ª –æ –∫–ª–∏–∫–µ, –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞.', 'debug');
            await sleep(rnd(2000, 5000)); // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        }
    } catch (e) {
        log(`‚ùå mainLoop: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (main page): ${e.message}`, 'error');
        if (e.message.includes('403 Forbidden detected')) {
            log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω 403 –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞. –í—ã–ø–æ–ª–Ω—è—é –∂–µ—Å—Ç–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É.', 'error');
            await hardReload();
        } else { // –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
            await hardReload();
        }
    }

    // 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ XU –≤–Ω–µ iframe - —ç—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
    try {
      const xu = await page.evaluate(()=>+document.querySelector('span.text-sm.font-medium.text-amber-400.drop-shadow-sm.tracking-wide')?.textContent.replace(/\s/g,'').replace(',','.')||0);
      if(xu!==lastXu){lastXu=xu;lastTS=Date.now();}
      if(Date.now()-lastTS>300000 && xu > 0){
        log('üõë XU —Å—Ç–∞—Ç–∏—á–µ–Ω 5 –º–∏–Ω ‚Äì reload','warn');
        await hardReload();
        lastTS=Date.now();
      }
    } catch(e) {
      log(`‚ùå mainLoop: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ XU (–≤–Ω–µ iframe): ${e.message}`, 'error');
    }

    // 4) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies
    if (Date.now() - lastCookieSave > 5 * 60 * 1000) {
      let cookiesToSave = [];
      try {
        cookiesToSave = await page.browser().defaultBrowserContext().cookies();
        await save(DEF.cookiesFilePath, cookiesToSave);
        log(`üíæ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${cookiesToSave.length})`, 'info');
        lastCookieSave = Date.now();
      } catch (e) {
        log(`‚ùå mainLoop: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–∫–∏: ${e.message}`, 'error');
      }
    }

    // 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º stats –Ω–∞ –¥–∏—Å–∫
    await save(DEF.statsFilePath, stats);

    await sleep(1000);
  }
}

/* ===== 10. –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ ========================== */
(async () => {
  process.on('unhandledRejection', (reason, promise) => {
      log(`üö® Unhandled Rejection at: ${promise}, reason: ${reason}`, 'error');
      if (browser) {
          browser.close().catch(e => log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–∑ unhandledRejection: ${e.message}`, 'error'));
      }
      process.exit(1);
  });

  log('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...', 'info');
  config = {...DEF, ...(await load(DEF.configFilePath, {}))};
  stats  = {...stats, ...(await load(DEF.statsFilePath, {}))};

  log('‚ÑπÔ∏è –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...', 'info');
  await launch();
  listeners();

  log('‚ÑπÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ geturanium.io...', 'info');
  navigating = true;
  await page.goto('https://geturanium.io', { waitUntil:'networkidle2', timeout:60000 }); // –í–µ—Ä–Ω—É–ª networkidle2 –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  navigating = false; // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  log(`‚ÑπÔ∏è URL: ${page.url()}`, 'info');

  if (page.url().includes('/auth')) {
    log('üîë –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∂–¥—ë–º –≤—Ö–æ–¥–∞‚Ä¶', 'info');
    navigating = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º navigating, –µ—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await page.waitForNavigation({ waitUntil:'networkidle2', timeout:180000 })
        .catch(e => log(`‚åõ –¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}`, 'warn'));
    navigating = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º navigating –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'info');
    const cook = await page.browser().defaultBrowserContext().cookies();
    await save(DEF.cookiesFilePath, cook);
    lastCookieSave = Date.now();
  } else {
    log('‚ÑπÔ∏è –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏', 'info');
    const cook = await page.browser().defaultBrowserContext().cookies();
    await save(DEF.cookiesFilePath, cook);
    lastCookieSave = Date.now();
  }

  await sleep(3000);
  process.on('SIGINT', async () => {
    log('SIGINT, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º...', 'info');
    const cook = await page.browser().defaultBrowserContext().cookies().catch(()=>[]);
    await save(DEF.cookiesFilePath, cook);
    await save(DEF.configFilePath,  config);
    await save(DEF.statsFilePath,   stats);
    if (browser) await browser.close();
    process.exit(0);
  });

  scheduleReload();
  await mainLoop();
})();